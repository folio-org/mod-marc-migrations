version: "3.8"

services:

  mod-marc-migrations:
    container_name: mod-marc-migrations
    image: dev.folio/mod-marc-migrations
    user: root
    build:
      context: ../
      dockerfile: Dockerfile
    networks:
      - mod-marc-migrations-local
    ports:
      - "${APP_PORT}:8081"
      - "${DEBUG_PORT}:${DEBUG_PORT}"
    volumes:
      - ./generated:/usr/verticles/job
    depends_on:
      - api-mock
      - postgres
      - mod-entities-links
      - minio
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      ENV: ${ENV}
      JAVA_OPTIONS: -Xmx120m -Xms120m
      JAVA_TOOL_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT}
      OKAPI_URL: ${OKAPI_URL}
      SYSTEM_USER_PASSWORD: mod-marc-migrations
      S3_REGION: ${S3_REGION}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_URL: ${S3_URL}
      RECORDS_CHUNK_SIZE: ${RECORDS_CHUNK_SIZE}
      CHUNK_FETCH_IDS_COUNT: ${CHUNK_FETCH_IDS_COUNT}
      CHUNK_PERSIST_COUNT: ${CHUNK_PERSIST_COUNT}

  mod-entities-links:
    container_name: mod-entities-links-marc-migrations
    image: folioci/mod-entities-links:latest
    networks:
      - mod-marc-migrations-local
    ports:
      - "8083:8081"
    depends_on:
      - postgres
      - kafka
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_HOST: ${KAFKA_HOST}
      KAFKA_PORT: ${KAFKA_PORT}
      ENV: ${ENV}
      JAVA_OPTIONS: -Xmx120m -Xms120m
      OKAPI_URL: ${OKAPI_URL}
      SYSTEM_USER_PASSWORD: mod-entities-links

  api-mock:
    image: wiremock/wiremock:latest
    container_name: api-mock-marc-migrations
    networks:
      - mod-marc-migrations-local
    ports:
      - "9130:8080"
    volumes:
      - ../src/test/resources/mappings:/home/wiremock/mappings
    entrypoint: ["/docker-entrypoint.sh", "--global-response-templating", "--disable-gzip", "--verbose"]

  postgres:
    image: postgres:12-alpine
    container_name: postgres-marc-migrations
    networks:
      - mod-marc-migrations-local
    volumes:
      - ../src/test/resources/sql/mod-entities-links-init.sql:/docker-entrypoint-initdb.d/links-init.sql
      - ../src/test/resources/sql/mod-source-record-storage-init.sql:/docker-entrypoint-initdb.d/srs-init.sql
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-marc-migrations
    networks:
      - mod-marc-migrations-local
    ports:
      - "${PGADMIN_PORT}:80"
    environment:
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
      
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper-marc-migrations
    networks:
      - mod-marc-migrations-local
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka-marc-migrations
    networks:
      - mod-marc-migrations-local
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:29092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:29092
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui-marc-migrations
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_PORT}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - mod-marc-migrations-local

  minio:
    image: minio/minio
    container_name: minio-marc-migrations
    ports:
      - "9000:9000"
      - "9001:9001"
      - "33995:33995"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY}
    command: server start
    networks:
      - mod-marc-migrations-local

networks:
  mod-marc-migrations-local:
    driver: bridge

volumes:
  pgadmin-data:
    driver: "local"
  postgres-data:
    driver: "local"
  minio-data:
    driver: "local"
